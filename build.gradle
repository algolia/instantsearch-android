// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    apply from: 'libraries.gradle'
    apply from: "properties.gradle"
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.20.0" // exposes dependencyUpdates task
    id 'com.github.dcendents.android-maven' version "2.1" // allows deploying to Mvn repos.
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

subprojects {
    apply from: "../common.gradle"
}
//
//task aggregatedJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
//    destinationDir = file("$buildDir/docs/javadoc")
//    title = "$project.name $version API"
//    println("Aggregating Javadocs into $destinationDir")
//    options.author true
//    options.links("http://docs.oracle.com/javase/8/docs/api")
//    options.linksOffline("http://d.android.com/reference", "$System.env.ANDROID_HOME/docs/reference")
////    options.addStringOption 'Xdoclint:none', '-quiet'
//
//    subprojects.each { proj ->
//        println("Processing $proj.name's Javadoc (${proj.tasks.collect().size()} tasks)...")
//        println("Sources: ${proj.sourceSets.size()}")
//        proj.tasks.each { javadocTask ->
//            println("Found $javadocTask.name!")
//            source subprojects.collect { it.sourceSets }
////            classpath = files(subprojects.collect { it.sourceSets.compileClasspath })
////            if (javadocTask.withType(Javadoc)) {
////                source += javadocTask.source
////                classpath += javadocTask.classpath
////                excludes += javadocTask.excludes
////                includes += javadocTask.includes
////            }
//        }
//    }
//}

// Multi-module Javadoc aggregation, see https://stackoverflow.com/a/34445816/3109189
class JavadocAggregationPlugin implements Plugin<Project> {
    static final String AGGREGATE_JAVADOCS_TASK_NAME = 'aggregateJavadocs'

    @Override
    void apply(Project project) {
        Project rootProject = project.rootProject
        rootProject.gradle.projectsEvaluated {
            Set<Project> librarySubprojects = getLibraryProjects(rootProject)
            if (!librarySubprojects.isEmpty()) {
                rootProject.task(AGGREGATE_JAVADOCS_TASK_NAME, type: Javadoc) {
                    description = 'Aggregates Javadoc API documentation of all subprojects.'
                    group = JavaBasePlugin.DOCUMENTATION_GROUP
                    dependsOn librarySubprojects.javadoc //please note that javadoc is the name of the separate Javadoc task in each library module

                    source librarySubprojects.javadoc.source
                    destinationDir rootProject.file("$rootProject.buildDir/docs/javadoc") //Javadoc destination directory
                    classpath = rootProject.files(librarySubprojects.javadoc.classpath)
                }
            }
        }
    }

    private Set<Project> getLibraryProjects(Project rootProject) {
        rootProject.subprojects.findAll { subproject -> subproject.plugins.findPlugin("com.android.library") } //In this case every library module is selected
    }
}

apply plugin: JavadocAggregationPlugin

task copyJavaDoc(type: Copy, dependsOn: "aggregateJavadocs") {
    def sources = "../docgen/src/"
    inputs.file sources
    into(sources)
    from("./build/docs/")
}