fastlane_require "increment_semver"
fastlane_require "json"
fastlane_require "httparty"

fastlane_version "2.108.0"
default_platform(:android)

platform :android do
  desc "Runs all the tests."
  lane :test do
    update_deps_to_use_commit_hash_if_workflow_triggered_by_client
    gradle(task: "clean test", build_type: "Release")
  end

  desc "Deploy the library. Available options: type:major|minor|patch optional: notest:true|false (default false)"
  lane :deploy do |options|
    # Arguments handling
    notest = options[:notest] || false
    type = options[:type]
    type.nil? and UI.user_error!("You need to specify a type.")
    ["major", "minor", "patch"].include? type or UI.user_error!("Type #{type} is not a valid type (patch/minor/major")

    # Compute next version number
    current_version = get_version_name(
      gradle_file_path: "properties.gradle",
      ext_constant_name: "VERSION"
    ).tr("'", "")
    puts "Current version: #{current_version}"
    version_number = increment_semver(current_version, type)
    version_number.scan(/(?=\.)/).count == 2 or UI.user_error!("version #{version_number} is not a valid version code")
    puts "New version: #{version_number}"

    # Ensure branch is master & WC clean, then pull changes
    ensure_git_status_clean(show_uncommitted_changes: true)
    sh("git checkout ../Gemfile.lock") # Ignore different bundle version changing Gemfile https://discuss.bitrise.io/t/5176/5
    if sh("git rev-parse origin/master") != sh("git rev-parse HEAD")
      UI.user_error!("origin/master and HEAD Hashes differ -> we are probably not on master and therefore can't deploy")
    end
    sh("git checkout master") # Checkout master so we can pull latest changes
    git_pull
    ensure_git_status_clean(show_uncommitted_changes: true, show_diff: true)

    # Generate changelog updates
    changes = sh("conventional-changelog --preset angular --output-unreleased", log: false)
    changes_lines = changes.lines[1..-1] # Remove header
    changes_lines[0] = "## #{version_number}"
    changes = changes_lines.join
    puts "Changes: #{changes}"
    file_edit("../CHANGELOG.md", /^(# Changelog\n+)/, "\\1\n#{changes}\n")

    # Check changelog contains version
    changes.include? version_number or UI.user_error!("Error: New version #{version_number} not present in changelog")

    # Tests / deployment
    notest == true or test

    # Update version in code
    file_edit("../properties.gradle", /(VERSION = )'.*'/, "\\1'#{version_number}'\n")
    file_edit("../README.md", /(implementation '[^[:digit:]]+).*$/, "\\1#{version_number}'\n")

    # Release on Bintray
    gradle(task: "clean bintrayUpload")

    # Commit to Git on release branch
    branch_name = "version-#{version_number}"
    sh("git checkout -b #{branch_name}")
    git_commit(
      path: ["CHANGELOG.md", "README.md", "properties.gradle"],
      message: "chore(release): Version #{version_number} [ci skip]"
    )
    sh("git push origin #{branch_name}")

    # Add git tag and push to GitHub
    add_git_tag(tag: version_number, force: true)
    push_git_tags(force: true)

    # Send PR
    token = ENV["GITHUB_TOKEN"]
    pull_request_url = create_pull_request(
      api_token: token,
      repo: "algolia/instantsearch-android",
      title: "chore(release): Version #{version_number} [ci skip]",
      head: branch_name,
      base: "master",
      body: "Please check the files before merging in case I've overidden something accidentally."
    )
    puts "PR opened: #{pull_request_url}"
    sh("envman add --key GITHUB_PR_URL --value #{pull_request_url}")

    # Remove temporary version tags and switch back from branch
    sh("git tag --delete minor major patch | true")
    sh("git push origin :refs/tag/patch :refs/tag/minor :refs/tag/major")
    sh("git checkout master")
    puts("Tags removed, switching back to master branch")

    # Update documentation and AndroidX artifacts
    Dir.chdir ".." do
    puts "Now in #{Dir.pwd}, ready to deploy docs/AndroidX..."
      sh("./scripts/deploy-docs.sh")
      sh("./scripts/release-androidx.sh")
    end

    # Post release on GitHub
    github_release = set_github_release(
      repository_name: "algolia/instantsearch-android",
      api_token: token,
      name: version_number,
      tag_name: version_number,
      description: changes.lines[2..-1].join,
      commitish: "master"
    )
    puts "Release posted: #{github_release['html_url']}."
  end
end

def update_deps_to_use_commit_hash_if_workflow_triggered_by_client
  hash = ENV['GIT_DEPENDENT_COMMIT_HASH']
  if hash
    file_edit("../libraries.gradle", /^.*com.algolia:algoliasearch-android:.*$/m,
    "            \"algolia\"          : \"com.github.algolia:algoliasearch-client-android:#{hash}\",")
    puts "Changed gradle libraries to build with algoliasearch-client-android with commit #{hash}."
  else
    puts "No specific dependencies to test, proceeding with latest release of API Client."
  end
end

def file_edit(filename, regexp, replacement)
  Tempfile.open(".#{File.basename(filename)}", File.dirname(filename)) do |tempfile|
    File.open(filename).each do |line|
      tempfile.puts line.gsub(regexp, replacement)
    end
    tempfile.fdatasync
    tempfile.close
    stat = File.stat(filename)
    FileUtils.chown stat.uid, stat.gid, tempfile.path
    FileUtils.chmod stat.mode, tempfile.path
    FileUtils.mv tempfile.path, filename
  end
end
