package com.algolia.instantsearch.insights

import android.content.Context
import androidx.work.WorkManager
import com.algolia.instantsearch.insights.exception.InsightsException
import com.algolia.instantsearch.insights.internal.InsightsController
import com.algolia.instantsearch.insights.internal.InsightsMap
import com.algolia.instantsearch.insights.internal.data.distant.InsightsHttpRepository
import com.algolia.instantsearch.insights.internal.data.local.InsightsPrefsRepository
import com.algolia.instantsearch.insights.internal.data.settings.InsightsEventSettings
import com.algolia.instantsearch.insights.internal.extension.clientInsights
import com.algolia.instantsearch.insights.internal.extension.defaultConfiguration
import com.algolia.instantsearch.insights.internal.extension.insightsSettingsPreferences
import com.algolia.instantsearch.insights.internal.extension.insightsSharedPreferences
import com.algolia.search.helper.toAPIKey
import com.algolia.search.helper.toApplicationID
import com.algolia.search.helper.toIndexName
import com.algolia.search.model.APIKey
import com.algolia.search.model.ApplicationID
import com.algolia.search.model.IndexName
import com.algolia.search.model.insights.InsightsEvent
import com.algolia.search.model.insights.UserToken

public interface Insights : HitsAfterSearchTrackable, FilterTrackable {

    /**
     * Change this variable to `true` or `false` to disable Insights, opting-out the current session from tracking.
     */
    public var enabled: Boolean

    /**
     * Change this variable to change the default debouncing interval. Values lower than 15 minutes will be ignored.
     */
    public var debouncingIntervalInMinutes: Long?

    /**
     * Set a user identifier that will override any event's.
     *
     * Depending if the user is logged-in or not, several strategies can be used from a sessionId to a technical identifier.
     * You should always send pseudonymous or anonymous userTokens.
     */
    public var userToken: UserToken?

    /**
     * Change this variable to change the default amount of event sent at once.
     */
    public var minBatchSize: Int

    /**
     * Change this variable to `true` or `false` to enable or disable logging.
     * Use a filter on tag `Algolia Insights` to see all logs generated by the Insights library.
     */
    public var loggingEnabled: Boolean

    /**
     * Tracks a View event constructed manually.
     *
     * @param event insights view event to be tracked
     */
    public fun viewed(event: InsightsEvent.View)

    /**
     * Tracks a Click event constructed manually.
     *
     * @param event insights click event to be tracked
     */
    public fun clicked(event: InsightsEvent.Click)

    /**
     * Tracks a Conversion event, constructed manually.
     *
     * @param event insights conversion event to be tracked
     */
    public fun converted(event: InsightsEvent.Conversion)

    /**
     * Method for tracking an event.
     * [documentation][https://www.algolia.com/doc/rest-api/insights/?language=android#push-events].
     *
     * @param event insights event to be tracked.
     */
    public fun track(event: InsightsEvent)

    /**
     * Insights configuration.
     */
    public class Configuration(

        /**
         * Maximum amount of time in milliseconds before a connect timeout
         */
        public val connectTimeoutInMilliseconds: Long,

        /**
         * Maximum amount of time in milliseconds before a read timeout.
         */
        public val readTimeoutInMilliseconds: Long,

        /**
         * Default User Token.
         */
        public val defaultUserToken: UserToken? = null,
    )

    public companion object {

        /**
         * Access an already registered `Insights` without having to pass the `apiKey` and `appId`.
         *
         * If the index was not register before, it will throw an [InsightsException.IndexNotRegistered] exception.
         * @param indexName The index that is being tracked.
         * @return An Insights instance.
         * @throws InsightsException.IndexNotRegistered if no index was registered as indexName before.
         */
        @JvmStatic
        public fun shared(indexName: IndexName): Insights {
            return InsightsMap[indexName] ?: throw InsightsException.IndexNotRegistered()
        }

        /**
         * Access the latest registered `Insights` instance, if any.
         */
        @JvmStatic
        public var shared: Insights? = null
            @JvmName("shared")
            get() = if (field != null) field else throw InsightsException.IndexNotRegistered()

        /**
         * Register your index with a given appId and apiKey.
         *
         * @param context An Android Context.
         * @param appId The given app id for which you want to track the events.
         * @param apiKey The API Key for your `appId`.
         * @param indexName The index that is being tracked.
         * @param configuration A Configuration class.
         */
        @JvmStatic
        public fun register(
            context: Context,
            appId: String,
            apiKey: String,
            indexName: String,
            configuration: Configuration? = null,
        ): Insights {
            return register(context, appId.toApplicationID(), apiKey.toAPIKey(), indexName.toIndexName(), configuration)
        }

        /**
         * Register your index with a given appId and apiKey.
         *
         * @param context An Android Context.
         * @param appId The given app id for which you want to track the events.
         * @param apiKey The API Key for your `appId`.
         * @param indexName The index that is being tracked.
         * @param configuration insights configuration
         */
        @JvmStatic
        public fun register(
            context: Context,
            appId: ApplicationID,
            apiKey: APIKey,
            indexName: IndexName,
            configuration: Configuration? = null,
        ): Insights {
            val localRepository = InsightsPrefsRepository(context.insightsSharedPreferences(indexName))
            val settings = InsightsEventSettings(context.insightsSettingsPreferences())
            val config = configuration ?: defaultConfiguration(settings)
            val distantRepository = InsightsHttpRepository(clientInsights(appId, apiKey, config))
            val workManager = WorkManager.getInstance(context)
            return InsightsController.register(
                indexName = indexName,
                localRepository = localRepository,
                distantRepository = distantRepository,
                workManager = workManager,
                settings = settings,
                configuration = config
            )
        }
    }
}
