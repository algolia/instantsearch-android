buildscript {
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.0"
}

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'

ext {
    GROUP = 'com.algolia'
    BASENAME = 'instantsearch-android'
    CODENAME = GROUP + ":" + BASENAME
    NAME = 'InstantSearch Android'
    DESC = "A library of widgets and helpers to build instant-search applications on Android."
    GITHUB = "algolia/instantsearch-android"
    WEBSITE = "https://github.com/" + GITHUB
    REPO = WEBSITE + ".git"
    LICENSE = 'MIT'
    LICENSE_URL = "http://www.opensource.org/licenses/mit-license.php"
    VERSION = '1.8.2'
    VERSION_DESC = 'Version ' + VERSION

    VERSION_APPCOMPAT = '27.1.1'
}

group = project.ext.GROUP
version = project.ext.VERSION

android {
    dataBinding {
        enabled true
    }

    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 1
        versionName project.ext.VERSION
        consumerProguardFiles "proguard-rules.pro"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Disable automatic throwing on system method calls.
    // Rationale: We don't want to mock system methods (for example JSONArray.length),
    // but rather ensure we use them correctly.
    testOptions {
        unitTests {
            returnDefaultValues = true
            all {
                testLogging {
                    events "skipped", "failed", "standardOut", "standardError"
                    exceptionFormat "full"
                    outputs.upToDateWhen { false }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api 'com.algolia:algoliasearch-android:3.20.11' // MavenCentral rejects X.+ notation
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.github.bumptech.glide:glide:4.3.1'
    implementation('com.jayway.jsonpath:json-path:2.3.0') {
        exclude module: 'asm'
    }

    implementation "com.android.support:appcompat-v7:$VERSION_APPCOMPAT"
    implementation "com.android.support:support-v4:$VERSION_APPCOMPAT"
    implementation "com.android.support:recyclerview-v7:$VERSION_APPCOMPAT"

    // Unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:3.7.1"
    testImplementation 'org.mockito:mockito-core:1.10.19'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) // dependencies
    failOnError false // Errors about classes `R` and `BuildConfig` should not trigger failure
    options.optionFiles << file('javadoc.options')
    options.links("http://docs.oracle.com/javase/8/docs/api")
    options.linksOffline("http://d.android.com/reference", "$System.env.ANDROID_HOME/docs/reference")
    options.encoding('UTF-8')
    options.version(true)
    options.windowTitle(project.ext.NAME)
    options.docTitle(project.ext.NAME)
    options.footer(project.ext.NAME + ": " + project.ext.DESC)
}

afterEvaluate {
    // we need this as javadoc task's body is called before android.libraryVariants is filled. http://stackoverflow.com/a/34572606/3109189
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.getJavaCompiler().classpath.files
    })
}

task copyJavaDoc(type: Copy, dependsOn: javadoc) {
    def sources = "../docgen/src/"
    inputs.file sources
    into(sources)
    from("./build/docs/")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    dependsOn "assembleRelease"
    classifier "sources"
    from android.sourceSets.main.java.srcDirs
}


// add sources jar tasks as artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
    archives file: new File("${project.buildDir}/outputs/aar/${project.name}-release.aar"),
            name: "${project.name}-release.aar",
            type: "aar"
}

def pomConfig = {
        name project.ext.CODENAME
        description project.ext.DESC
        url project.ext.WEBSITE

        licenses {
            license {
                name project.ext.LICENSE
                url project.ext.LICENSE_URL
                distribution "repo"
            }
        }
        developers {
            developer {
                id "algolia"
                name "The Algolia Team"
                email "hey@algolia.com"
            }
        }
        scm {
            connection project.ext.REPO
            developerConnection project.ext.REPO
            url project.ext.WEBSITE

        }
}

publishing.publications {
    BinTrayPublication(MavenPublication) {
        artifact sourcesJar
        artifact javadocJar
        artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"

        groupId project.ext.GROUP
        artifactId project.ext.BASENAME
        version project.ext.VERSION
        description project.ext.DESC

        pom.withXml {
            def root = asNode()
            root.children().last() + pomConfig
            root.appendNode("description", project.ext.DESC) //TODO Find why description is missing from pom.xml

            final dependenciesNode = asNode().appendNode('dependencies')
            println "Adding dependencies node"

            ext.addDependency = { Dependency dep, String scope ->
                if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
                    return // ignore invalid dependencies
                }
                println "Adding dependency $dep.name ($scope) to pom.xml"
                final dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', dep.group)
                dependencyNode.appendNode('artifactId', dep.name)
                dependencyNode.appendNode('version', dep.version)
                dependencyNode.appendNode('scope', scope)

                if (!dep.transitive) {
                    // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                    final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                    exclusionNode.appendNode('groupId', '*')
                    exclusionNode.appendNode('artifactId', '*')
                } else if (!dep.properties.excludeRules.empty) {
                    // Otherwise add specified exclude rules
                    final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                    dep.properties.excludeRules.each { ExcludeRule rule ->
                        exclusionNode.appendNode('groupId', rule.group ?: '*')
                        exclusionNode.appendNode('artifactId', rule.module ?: '*')
                    }
                }
            }

            // List all "compile" dependencies (for old Gradle)
            configurations.compile.getAllDependencies().each { dep -> addDependency(dep, "compile") }
            // List all "api" dependencies (for new Gradle) as "compile" dependencies
            configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
            // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
            configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['BinTrayPublication']
    publish = true // auto publish after upload
    pkg {
        repo = 'maven'
        name = project.ext.CODENAME
        licenses = [project.ext.LICENSE]
        vcsUrl = project.ext.REPO

        githubRepo = project.ext.GITHUB
        githubReleaseNotesFile = 'README.md'

        version {
            name = project.ext.VERSION
            desc = project.ext.VERSION_DESC
            released = new Date()
            vcsTag = project.ext.VERSION

            gpg {
                sign = true
            }

            mavenCentralSync {
                sync = true
                user = System.getenv('NEXUS_USERNAME')
                password = System.getenv('NEXUS_PASSWORD')
                close = '1'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}
