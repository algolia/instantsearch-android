buildscript {
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.0"
}

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'

ext {
    GROUP = 'com.algolia'
    BASENAME = 'instantsearch-android'
    CODENAME = GROUP + ":" + BASENAME
    NAME = 'InstantSearch Android'
    DESC = "A library of widgets and helpers to build instant-search applications on Android."
    GITHUB = "algolia/instantsearch-android"
    WEBSITE = "https://github.com/" + GITHUB
    REPO = WEBSITE + ".git"
    LICENSE = 'MIT'
    LICENSE_URL = "http://www.opensource.org/licenses/mit-license.php"
    VERSION = '1.7.3'
    VERSION_DESC = 'Version ' + VERSION

    VERSION_APPCOMPAT = '27.1.1'
}

group = project.ext.GROUP
version = project.ext.VERSION

android {
    dataBinding {
        enabled true
    }

    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 1
        versionName project.ext.VERSION
        consumerProguardFiles "proguard-rules.pro"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Disable automatic throwing on system method calls.
    // Rationale: We don't want to mock system methods (for example JSONArray.length),
    // but rather ensure we use them correctly.
    testOptions {
        unitTests {
            returnDefaultValues = true
            all {
                testLogging {
                    events "skipped", "failed", "standardOut", "standardError"
                    exceptionFormat "full"
                    outputs.upToDateWhen { false }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.algolia:algoliasearch-android:3.+'
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'com.github.bumptech.glide:glide:4.3.1'
    implementation('com.jayway.jsonpath:json-path:2.3.0') {
        exclude module: 'asm'
    }

    implementation "com.android.support:appcompat-v7:$VERSION_APPCOMPAT"
    implementation "com.android.support:support-v4:$VERSION_APPCOMPAT"
    implementation "com.android.support:recyclerview-v7:$VERSION_APPCOMPAT"

    // Unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:3.7.1"
    testImplementation 'org.mockito:mockito-core:1.10.19'
}

task writeNewPom {
    doLast {
        apply plugin: 'maven'
        description "Generates pom.xml"

        pom {
            project {
                packaging 'aar'
                groupId project.ext.GROUP
                artifactId project.ext.BASENAME

                name project.ext.CODENAME
                description project.ext.DESC
                url project.ext.WEBSITE

                licenses {
                    license {
                        name project.ext.LICENSE
                        url project.ext.LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id "algolia"
                        name "The Algolia Team"
                        email "hey@algolia.com"
                    }
                }
                scm {
                    connection project.ext.REPO
                    developerConnection project.ext.REPO
                    url project.ext.WEBSITE

                }
            }
        }.writeTo("${project.buildDir}/${project.ext.BASENAME}-${project.ext.VERSION}.pom")
                .writeTo("${project.buildDir}/publications/BinTrayPublication/pom-default.xml")
    }
}
task sourcesJar(type: Jar, dependsOn: writeNewPom) {
    classifier "sources"
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc, dependsOn: assemble) {
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) // dependencies
    failOnError false // Errors about classes `R` and `BuildConfig` should not trigger failure
    options.optionFiles << file('javadoc.options')
    options.links("http://docs.oracle.com/javase/8/docs/api")
    options.linksOffline("http://d.android.com/reference", "$System.env.ANDROID_HOME/docs/reference")
    options.encoding('UTF-8')
    options.version(true)
    options.windowTitle(project.ext.NAME)
    options.docTitle(project.ext.NAME)
    options.footer(project.ext.NAME + ": " + project.ext.DESC)
}

afterEvaluate {
    // we need this as javadoc task's body is called before android.libraryVariants is filled. http://stackoverflow.com/a/34572606/3109189
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.getJavaCompiler().classpath.files
    })
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

task copyJavaDoc(type: Copy, dependsOn: javadoc) {
    def sources = "../docgen/src/"
    inputs.file sources
    into(sources)
    from("./build/docs/")
}

// add sources jar tasks as artifacts
artifacts {
    archives sourcesJar
}

publishing.publications {
    BinTrayPublication(MavenPublication) {
        groupId project.ext.GROUP
        artifactId project.ext.BASENAME
        version project.ext.VERSION

        artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
        artifact sourcesJar
        artifact "${project.buildDir}/libs/instantsearch-${project.ext.VERSION}-javadoc.jar"
        artifact "${project.buildDir}/${project.ext.BASENAME}-${project.ext.VERSION}.pom"
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['BinTrayPublication']
    publish = true // auto publish after upload
    pkg {
        repo = 'maven'
        name = project.ext.CODENAME
        licenses = [project.ext.LICENSE]
        vcsUrl = project.ext.REPO

        githubRepo = project.ext.GITHUB
        githubReleaseNotesFile = 'README.md'

        version {
            name = project.ext.VERSION
            desc = project.ext.VERSION_DESC
            released = new Date()
            vcsTag = project.ext.VERSION

            gpg {
                sign = true
            }

            mavenCentralSync {
                sync = true
                user = System.getenv('NEXUS_USERNAME')
                password = System.getenv('NEXUS_PASSWORD')
                close = '1'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}
